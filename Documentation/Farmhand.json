{"doc" : {"assembly" : {"name" : "Farmhand"}, "members" : {"member" : [{"name" : "T:Farmhand.Constants", "summary" : "Various useful constants used by the API"}, {"name" : "P:Farmhand.Constants.ModContentDirectory", "summary" : "The directory name under which mods store their mod specific content"}, {"name" : "T:Farmhand.Content.ContentManager", "summary" : "An override for the XNA ContentManager which deals with loading custom XNBs when mods have registered custom overrides. Can also be used by mods to load their own XNB data"}, {"name" : "M:Farmhand.Content.ContentManager.Load``1(System.String)", "summary" : "Load an asset by via a relative (extensionless) path", "typeparam" : {"name" : "T", "text" : "Type of content to return"}, "param" : {"name" : "assetName", "text" : "Content to load"}, "returns" : "Loaded content"}, {"name" : "T:Farmhand.Events.ApiEvents", "summary" : "Contains events relating to the API"}, {"name" : "E:Farmhand.Events.ApiEvents.OnModError", "summary" : "Triggered when a mod throws an unhandled exception"}, {"name" : "T:Farmhand.Events.ControlEvents", "summary" : "Contains events relating to controls. (Keyboard/Mouse/Gamepad)"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyboardChanged", "summary" : "Triggered on keyboard state change"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyPressed", "summary" : "Triggered on key press"}, {"name" : "E:Farmhand.Events.ControlEvents.OnKeyReleased", "summary" : "Triggered on key release"}, {"name" : "E:Farmhand.Events.ControlEvents.OnMouseChanged", "summary" : "Triggered on mouse state change"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerButtonPressed", "summary" : "Triggered on controller button pressed"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerButtonReleased", "summary" : "Triggered on controller button released"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerTriggerPressed", "summary" : "Triggered on controller trigger pressed"}, {"name" : "E:Farmhand.Events.ControlEvents.OnControllerTriggerReleased", "summary" : "Triggered on controller trigger released"}, {"name" : "M:Farmhand.Events.EventCommon.SafeInvoke(System.EventHandler,System.Object)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles ordinary EventHandler events", "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}]}, {"name" : "M:Farmhand.Events.EventCommon.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles delegates with custom arguments", "typeparam" : {"name" : "T", "text" : "Type of event arguments. Must inherit from EventArgs"}, "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}, {"name" : "args", "text" : "Arguments to pass to event"}]}, {"name" : "M:Farmhand.Events.EventCommon.SafeCancellableInvoke``1(System.EventHandler{``0},System.Object,``0)", "summary" : "Safely invokes an event and reports when mods throw exceptions. This overload handles delegates with custom arguments", "typeparam" : {"name" : "T", "text" : "Type of event arguments. Must inherit from CancelEventArgs"}, "param" : [{"name" : "evt", "text" : "Event to throw"}, {"name" : "sender", "text" : "Sender to pass to event"}, {"name" : "args", "text" : "Arguments to pass to event"}], "returns" : "True when event was canceled by a delegate"}, {"name" : "T:Farmhand.Events.FarmAnimalEvents", "summary" : "Contains events relating to farm animals"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnBeforeEatGrass", "summary" : "Triggers when an animal eats grass"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnMakeSound", "summary" : "Triggers when an animal makes sound"}, {"name" : "F:Farmhand.Events.FarmAnimalEvents.OnFarmerPushing", "summary" : "Triggers when an animal is pushed by a player"}, {"name" : "T:Farmhand.Events.GameEvents", "summary" : "Contains events relating to the main game state"}, {"name" : "M:Farmhand.Events.GlobalRouteManager.Listen(System.String,System.String,System.Action{Farmhand.Events.Arguments.EventArgsGlobalRouteManager})", "summary" : "Attach a listener and enable the global route table", "param" : [{"name" : "type", "text" : "The type containing the method to listen for"}, {"name" : "method", "text" : "The method to listen for"}, {"name" : "callback", "text" : "The delegate to add"}]}, {"name" : "M:Farmhand.Events.GlobalRouteManager.Remove(System.String,System.String,System.Action{Farmhand.Events.Arguments.EventArgsGlobalRouteManager})", "summary" : "Remove an attached listener and disable the global route table if no listeners are attached", "param" : [{"name" : "type", "text" : "The type containing the method to listen for"}, {"name" : "method", "text" : "The method to listen for"}, {"name" : "callback", "text" : "The delegate to remove. This must be the same instance used when first registering the listener"}]}, {"name" : "T:Farmhand.Events.GraphicsEvents", "summary" : "Contains events relating to graphics"}, {"name" : "T:Farmhand.Events.LocationEvents", "summary" : "Contains events relating to locations"}, {"name" : "T:Farmhand.Events.MenuEvents", "summary" : "Contains events relating to menus"}, {"name" : "T:Farmhand.Events.PlayerEvents", "summary" : "Contains events relating to players"}, {"name" : "T:Farmhand.Events.SaveEvents", "summary" : "Contains events related to saving/loading"}, {"name" : "E:Farmhand.Events.SaveEvents.OnBeforeSave", "summary" : "Triggered prior to saving"}, {"name" : "E:Farmhand.Events.SaveEvents.OnAfterSave", "summary" : "Triggered after saving"}, {"name" : "E:Farmhand.Events.SaveEvents.OnBeforeLoad", "summary" : "Triggered prior to loading"}, {"name" : "E:Farmhand.Events.SaveEvents.OnAfterLoad", "summary" : "Triggered afer loading"}, {"name" : "T:Farmhand.Events.TimeEvents", "summary" : "Contains events relating to time"}, {"name" : "T:Farmhand.Events.UiEvents", "summary" : "Contains events relating to the UI"}, {"name" : "T:Farmhand.Logging.Log", "summary" : "Contains general purpose logging functionality"}, {"name" : "M:Farmhand.Logging.Log.Success(System.String)", "summary" : "Successful message to display to console and logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Verbose(System.String)", "summary" : "Generic comment to display to console and logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Info(System.String)", "summary" : "Message for only console. Does not appear in logging.", "param" : {"name" : "message"}}, {"name" : "M:Farmhand.Logging.Log.Error(System.String)", "summary" : "Important message indicating an error.", "param" : {"name" : "message"}}, {"name" : "T:Farmhand.ConfigExtensions", "summary" : "Contains useful extension methods used by the ModConfiguration class"}, {"name" : "M:Farmhand.ConfigExtensions.Save``1(``0)", "summary" : "Writes a config to a json blob on the disk specified in the config's properties."}, {"name" : "T:Farmhand.Mod", "summary" : "Base type for Farmhand mods."}, {"name" : "P:Farmhand.Mod.ModSettings", "summary" : "Contains information loaded from a mod's Manifest.json. It is populated by the API prior to Entry being called"}, {"name" : "M:Farmhand.Mod.Entry", "summary" : "The Entry method for a mod. This method will be called during the loading process and is intended to let the developer setup"}, {"name" : "M:Farmhand.Mod.LoadConfigurationSettings(System.String)", "summary" : "", "param" : {"name" : "configPath"}}, {"name" : "T:Farmhand.ModConfiguration", "summary" : "This class provides an editable configuration file which mods can save data to. It is useful for things such as saving a Mod's options."}, {"name" : "P:Farmhand.ModConfiguration.ConfigLocation", "summary" : "The location of the mod file"}, {"name" : "P:Farmhand.ModConfiguration.ConfigDir", "summary" : "The directory of the mod file"}, {"name" : "M:Farmhand.ModConfiguration.Instance``1", "summary" : "Creates an instance of a ModConfiguration when called.", "typeparam" : {"name" : "T", "text" : "The mod configuration type. This must derive from ModConfiguration"}, "returns" : ""}, {"name" : "M:Farmhand.ModConfiguration.Load``1(System.String)", "summary" : "Loads the config from the json blob on disk, updating and re-writing to the disk if needed.", "typeparam" : {"name" : "T"}, "returns" : ""}, {"name" : "M:Farmhand.ModConfiguration.GenerateDefaultConfig``1", "summary" : "This is intended to allow developers to populate their Mod Configurations with default data when creating a new one."}, {"name" : "T:Farmhand.ModLoader", "summary" : "Handles loading mods"}, {"name" : "F:Farmhand.ModLoader.ModPaths", "summary" : "This value stores all the valid mod search directories"}, {"name" : "F:Farmhand.ModLoader.UsingSmapiMods", "summary" : "States whether or not we're using SMAPI mods, so that certain things can be disabled if not. Defaults to false and is automatically set by the ModLoader when encountering a SMAPI mod"}, {"name" : "M:Farmhand.ModLoader.DeactivateMod(Farmhand.Mod,Farmhand.ModState,System.Exception)", "summary" : "Forcibly deactivates a mod by detaching it's event listeners.", "param" : [{"name" : "mod", "text" : "The mod to deactive"}, {"name" : "state", "text" : "The new state of this mod. Defaults to ModState.Deactivated"}, {"name" : "error", "text" : "The exception encountered causing the mod to be unloaded. Defaults to null"}]}, {"name" : "M:Farmhand.ModLoader.DeactivateMod(Farmhand.Registries.Containers.ModManifest,Farmhand.ModState,System.Exception)", "summary" : "Forcibly deactivates a mod by detaching it's event listeners.", "param" : [{"name" : "mod", "text" : "The manifest of the mod to deactive"}, {"name" : "state", "text" : "The new state of this mod. Defaults to ModState.Deactivated"}, {"name" : "error", "text" : "The exception encountered causing the mod to be unloaded. Defaults to null"}]}, {"name" : "M:Farmhand.ModLoader.DetachAssemblyDelegates(System.Reflection.Assembly)", "summary" : "Forcibly detaches event delegates associated with a particular assembly", "param" : {"name" : "assembly", "text" : "The assembly the detach"}}, {"name" : "M:Farmhand.ModLoader.ReactivateMod(Farmhand.Mod)", "summary" : "Reattaches disabled delegates for previously disabled mods", "param" : {"name" : "mod", "text" : "The mod to reactivate"}}, {"name" : "M:Farmhand.ModLoader.ReactivateMod(Farmhand.Registries.Containers.ModManifest)", "summary" : "Reattaches disabled delegates for previously disabled mods", "param" : {"name" : "mod", "text" : "The manifest of the mod to reactivate"}}, {"name" : "T:Farmhand.ModState", "summary" : "Contains the variable possible states of a Mod"}, {"name" : "F:Farmhand.ModState.Unloaded", "summary" : "Unloaded mods have not yet been loaded by the ModLoader"}, {"name" : "F:Farmhand.ModState.Loaded", "summary" : "Loaded mods are activate and should be functioning"}, {"name" : "F:Farmhand.ModState.Deactivated", "summary" : "Deactivated mods are ones which were manually deactivated"}, {"name" : "F:Farmhand.ModState.MissingDependency", "summary" : "This mod was found to have a missing dependency by the ModLoader"}, {"name" : "F:Farmhand.ModState.Errored", "summary" : "This mod threw an exception and was forcibly unloaded by the ModLoader"}, {"name" : "F:Farmhand.ModState.InvalidManifest", "summary" : "This mod did not have a valid manifest. Typically this is caused by things such as invalid UniqueIDs or Content issues."}, {"name" : "T:Farmhand.Registries.ModRegistry", "summary" : "Holds a reference to every loaded mod manifest"}, {"name" : "M:Farmhand.Registries.ModRegistry.GetItem(System.String)", "summary" : "Returns a selected mod manifest", "param" : {"name" : "key", "text" : "The Unique ID of the mod"}, "returns" : ""}, {"name" : "M:Farmhand.Registries.ModRegistry.GetRegisteredItems", "summary" : "Returns all registered mods", "returns" : ""}, {"name" : "M:Farmhand.Registries.ModRegistry.RegisterItem(System.String,Farmhand.Registries.Containers.ModManifest)", "summary" : "Registers a mod", "param" : [{"name" : "itemId", "text" : "The UniqueID of the mod"}, {"name" : "item", "text" : "The mod manifest"}]}, {"name" : "M:Farmhand.Registries.ModRegistry.UnregisterItem(System.String)", "summary" : "Unregisters a mod", "param" : {"name" : "itemId", "text" : "The Unique ID of the mod"}}, {"name" : "T:Farmhand.Registries.Registry`2", "summary" : "A general use registry class.", "typeparam" : [{"name" : "TKey", "text" : "The UniqueID type"}, {"name" : "T", "text" : "The type to store"}]}, {"name" : "M:Farmhand.Registries.Registry`2.#ctor", "summary" : "Default Constructor"}, {"name" : "P:Farmhand.Registries.Registry`2.RegisteredItems", "summary" : "Registered Items"}, {"name" : "M:Farmhand.Registries.Registry`2.GetItem(`0)", "summary" : "Returns the value with the matching key", "param" : {"name" : "key", "text" : "Key to find"}, "returns" : ""}, {"name" : "M:Farmhand.Registries.Registry`2.RegisterItem(`0,`1)", "summary" : "Registers a new item", "param" : [{"name" : "key", "text" : "Key to register with"}, {"name" : "item", "text" : "Item to register"}]}, {"name" : "M:Farmhand.Registries.Registry`2.GetRegisteredItems", "summary" : "Gets all registered items", "returns" : "All registered items"}, {"name" : "M:Farmhand.Registries.Registry`2.GetAll", "summary" : "Returns the internal dictionary object", "returns" : ""}, {"name" : "M:Farmhand.Registries.Registry`2.UnregisterItem(`0)", "summary" : "Removes an item", "param" : {"name" : "key", "text" : "Key of item to remove"}}, {"name" : "T:Farmhand.Registries.TextureRegistry", "summary" : "Holds a reference to loaded textures. This class stores ordinary textures passed through but it primarily used to store mod textures"}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetRegisteredTextures", "summary" : "Returns all registered textures", "returns" : "All registered textures"}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetItem(System.String)", "summary" : "Returns item with matching id", "param" : {"name" : "itemId"}, "returns" : "Matching texture"}, {"name" : "M:Farmhand.Registries.TextureRegistry.RegisterItem(System.String,Microsoft.Xna.Framework.Graphics.Texture2D)", "summary" : "Registers item with it", "param" : [{"name" : "itemId", "text" : "Id of item to register"}, {"name" : "item", "text" : "Texture to register"}]}, {"name" : "M:Farmhand.Registries.TextureRegistry.UnregisterItem(System.String)", "summary" : "Removes an item with id", "param" : {"name" : "itemId", "text" : "Id to remove"}}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetRegisteredModTextures", "summary" : "Gets all registered mod textures", "returns" : "All registered mod textures"}, {"name" : "M:Farmhand.Registries.TextureRegistry.RegisterItem(Farmhand.Registries.Containers.ModManifest,System.String,Farmhand.Registries.Containers.ModTexture)", "summary" : "Registers new mod texture", "param" : [{"name" : "mod", "text" : "Mod which this texture belongs to"}, {"name" : "itemId", "text" : "Id of texture"}, {"name" : "item", "text" : "Texture to register"}]}, {"name" : "M:Farmhand.Registries.TextureRegistry.UnregisterItem(Farmhand.Registries.Containers.ModManifest,System.String)", "summary" : "Removes a mod texture", "param" : [{"name" : "mod", "text" : "Mod which this texture belongs to"}, {"name" : "itemId", "text" : "Id of texture"}]}, {"name" : "M:Farmhand.Registries.TextureRegistry.GetItem(Farmhand.Registries.Containers.ModManifest,System.String)", "summary" : "Gets a mod's texture", "param" : [{"name" : "mod", "text" : "Mod which this texture belongs to"}, {"name" : "itemId", "text" : "Id of texture"}], "returns" : "Matching mod texture"}, {"name" : "T:Farmhand.Registries.XnbRegistry", "summary" : "Stores registered XNB overloads"}, {"name" : "M:Farmhand.Registries.XnbRegistry.GetItem(System.String)", "summary" : "Get ModXnb with key", "param" : {"name" : "key", "text" : "Id of ModXnb to return"}, "returns" : "Matching ModXnb"}, {"name" : "M:Farmhand.Registries.XnbRegistry.GetRegisteredItems", "summary" : "Returns all registered ModXnbs", "returns" : "All ModXnbs"}, {"name" : "M:Farmhand.Registries.XnbRegistry.RegisterItem(System.String,Farmhand.Registries.Containers.ModXnb)", "summary" : "Register ModXnb with key", "param" : [{"name" : "itemId", "text" : "Id of ModXnb to return"}, {"name" : "item", "text" : "ModXnb to register"}]}, {"name" : "M:Farmhand.Registries.XnbRegistry.UnregisterItem(System.String)", "summary" : "Remove ModXnb", "param" : {"name" : "itemId", "text" : "Id of ModXnb to remove"}}]}}}